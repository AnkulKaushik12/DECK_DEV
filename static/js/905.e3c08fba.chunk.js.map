{"version":3,"file":"static/js/905.e3c08fba.chunk.js","mappings":"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","sources":["component/Drag.js","utils/apiUrls.js","config.js","utils/apiUtils.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { apiUrls } from \"../utils/apiUrls\";\r\nimport { callAPI } from \"../utils/apiUtils\";\r\nimport \"react-dropzone-uploader/dist/styles.css\";\r\nimport Dropzone from \"react-dropzone-uploader\";\r\n// import './Drag.scss'\r\nconst Drag = () => {\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isImported, setIsImported] = useState(false);\r\n  const [uploadedFile, setUploadedFile] = useState(null);\r\n  const [SelectedDocUrl, setSelectedDocUrl] = useState(\"\");\r\n  const [showDoc, setShowDoc] = useState(false);\r\n  const [inputUrl, setInputUrl] = useState(\"\");\r\n  const [val, setVal] = useState([]);\r\n  const [file, setFile] = useState([]);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  // specify upload params and url for your files\r\n  const getUploadParams = ({ meta }) => {\r\n    return { url: \"https://httpbin.org/post\" };\r\n  };\r\n\r\n    // called every time a file's `status` changes\r\n    const handleChangeStatus = ({ meta, file }, status) => {\r\n      console.log(status, meta, file);\r\n    };\r\n   \r\n    const handleSubmit = async (files) => {\r\n      const formdata=new FormData();\r\n      // data()\r\n      formdata.append('file',files[0].file)\r\n        const apiResponse = await callAPI(apiUrls.CONVERT, {}, \"POST\",formdata);\r\n        console.log(apiResponse,\"apiiiiiiiii\");\r\n        if(apiResponse.status === 200){\r\n  // let info=apiResponse.data.split(\" \");\r\n              toast.success(apiResponse.data.message+\" \"  , {\r\n                  position: \"top-center\",\r\n                  autoClose: 5000,\r\n                  hideProgressBar: false,\r\n                  closeOnClick: true,\r\n                  pauseOnHover: true,\r\n                  draggable: true,\r\n                  progress: undefined,\r\n                  theme: \"colored\",\r\n                  });\r\n        }else{\r\n          \r\n              toast.error(apiResponse.data, {\r\n                  position: \"top-center\",\r\n                  autoClose: 5000,\r\n                  hideProgressBar: false,\r\n                  closeOnClick: true,\r\n                  pauseOnHover: true,\r\n                  draggable: true,  \r\n                  progress: undefined,\r\n                  theme: \"colored\",\r\n                  });\r\n        }\r\n        console.log(apiResponse);\r\n  \r\n    };\r\n\r\n  const handleOpenModal = () => {\r\n    setIsModalOpen(true);\r\n  };\r\n  \r\n  const handleCloseModal = () => {\r\n    setIsModalOpen(false);\r\n    setIsLoading(false); // Reset loading state\r\n    setIsImported(false); // Reset imported state\r\n    setUploadedFile(null);\r\n  };\r\n\r\n  const handleDrop = (event) => {\r\n    event.preventDefault();\r\n    const files = event.dataTransfer.files;\r\n    // Handle the dropped files, e.g., upload or process them.\r\n    console.log(\"Dropped files:\", files);\r\n    // Display the first dropped file in the upload section\r\n    if (files.length > 0) {\r\n      setUploadedFile(files[0]);\r\n    }\r\n  };\r\n\r\n  // const handleFileSelect = (event) => {\r\n  //   const files = event.target.files;\r\n  //   // Handle the selected files, e.g., upload or process them.\r\n  //   console.log(\"Selected files:\", files);\r\n  //   // Display the first selected file in the upload section\r\n  //   if (files.length > 0) {\r\n  //     setUploadedFile(files[0]);\r\n  //   }\r\n  // };\r\n\r\n  const handleFileSelect = async (event) => {\r\n    const files = event.target.files;\r\n\r\n    console.log(\"Selected files:\", files);\r\n    const formdata = new FormData();\r\n    // data()\r\n// <<<<<<< HEAD\r\n//     console.log(event.target.files,\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\");\r\n//     formdata.append('file',files[0]?.File)\r\n//       const apiResponse = await callAPI(apiUrls.CONVERT, {}, \"POST\",formdata);\r\n//       console.log(apiResponse,\"apiiiiiiiii\");\r\n//     // // Display the first selected file in the upload section\r\n// =======\r\n    console.log(file, \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\");\r\n    formdata.append(\"file\", file[0]?.file);\r\n    const apiResponse = await callAPI(apiUrls.CONVERT, {}, \"POST\", formdata);\r\n    console.log(apiResponse, \"apiiiiiiiii\");\r\n    // Display the first selected file in the upload section\r\n// >>>>>>> 27e01517eb62402a270f1fbc5081871e90970561\r\n    if (files.length > 0) {\r\n      setIsLoading(true); // Start uploading\r\n      // Simulate file upload process (replace setTimeout with actual upload process)\r\n      setTimeout(() => {\r\n        // After successful upload\r\n        setIsLoading(false); // Uploading done\r\n        setIsImported(true); // Mark as imported\r\n      }, 1000); // Replace 2000 with actual upload time\r\n    }\r\n  };\r\n\r\n  const handleRemoveFile = () => {\r\n    // Remove the uploaded file\r\n    setUploadedFile(null);\r\n  };\r\n\r\n  const handleUploadClick = async (event) => {\r\n    // Trigger the file input click event\r\n\r\n    document.getElementById(\"file-input\").click();\r\n  };\r\n\r\n  const handleFetchDoc = () => {\r\n    // Check if the input URL is not empty\r\n    if (inputUrl) {\r\n      setIsLoading(true); // Start loading\r\n      // Simulate loading process (replace setTimeout with actual import process)\r\n      setTimeout(() => {\r\n        setSelectedDocUrl(inputUrl);\r\n        setShowDoc(true);\r\n        setIsImported(true); // Mark as imported\r\n        setIsLoading(false); // Loading done\r\n      }, 2000); // Replace 2000 with actual loading time\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n  async function fetchData() {\r\n    const apiResponse1 = await callAPI(apiUrls.GETFILE, {}, \"GET\");\r\n    console.log(apiResponse1);\r\n    setVal(apiResponse1.data);\r\n  }\r\n  const handleClick = () => {\r\n    // Navigate to the PresentationDetail component\r\n    navigate(\"/presentation\");\r\n  };\r\nconst handlePresentation=()=>{\r\nconsole.log(\"sssss\");\r\n}\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <div\r\n          className=\"drag-container\"\r\n          style={{\r\n            display: \"flex\",\r\n            gap: \"20px\",\r\n          }}\r\n        >\r\n          <div>\r\n            <h2\r\n              style={{\r\n                color: \"black\",\r\n              }}\r\n            >\r\n              Decks\r\n            </h2>\r\n          </div>\r\n          <div>\r\n            <button\r\n              onClick={handleOpenModal}\r\n              style={{\r\n                border: \"1px dotted #000\",\r\n                borderRadius: \"8px\",\r\n                padding: \"1px\",\r\n                textAlign: \"center\",\r\n                width: \"5.9rem\",\r\n                height: \"2.5rem\",\r\n                textAlign: \"center\",\r\n                backgroundColor: \"black\",\r\n                color: \"white\",\r\n              }}\r\n            >\r\n              <h6>Add New</h6>\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div\r\n          className=\"imageContainer\"\r\n        \r\n        >\r\n          {/* {val.map((image) => (\r\n        <img key={image.id}\r\n        src={image}\r\n        alt={`Im`}\r\n        // className=\"deck-image\"\r\n        style={{ width: '90%', height: '120px', borderRadius: \"15px\"}}\r\n        />\r\n      ))} */}\r\n\r\n      {\r\n        val.map((image,i) => (\r\n          <div \r\n           key={image.id}>\r\n          <img\r\n          onClick={handlePresentation()}\r\n          src={image}\r\n          alt={`Im`}\r\n          /> \r\n          <p>{i+1}</p>\r\n          </div>\r\n        ))\r\n      }\r\n\r\n          {/* <Link to=\"/presentation\" onClick={handleClick}>\r\n            <img\r\n              src= \"https://source.unsplash.com/user/c_v_r/1900x800\" \r\n              // src= {../../assets/img/about-us.jpg}\r\n              alt=\"Deck Presentation 01\"\r\n              style={{\r\n                width: \"100% \", // Adjust the width of the image as needed\r\n                height: \"100px\", // Adjust the height of the image as needed\r\n                borderRadius: \"5px\", // Adjust the border radius as needed\r\n              }}\r\n            />\r\n          </Link> */}\r\n          {/* <h6 style={{ color: \"gray\" }}>Deck Presentation 01</h6> */}\r\n        // </div>\r\n\r\n        {isModalOpen && (\r\n          <div\r\n            style={{\r\n              position: \"fixed\",\r\n              top: \"50%\",\r\n              left: \"50%\",\r\n              transform: \"translate(-50%, -50%)\",\r\n              backgroundColor: \"white\",\r\n              boxShadow: \"0px 0px 24px rgba(0, 0, 0, 0.2)\",\r\n              padding: \"16px\",\r\n              borderRadius: \"10px\",\r\n              // width: \"520px\",\r\n              width: \"40%\",\r\n              // height: \"400px\",\r\n              minHeight: \"70vh\"\r\n            }}\r\n            onDrop={handleDrop}\r\n            onDragOver={(e) => e.preventDefault()} // Prevent default to allow drop\r\n          >\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"space-between\",\r\n                alignItems: \"center\",\r\n              }}\r\n            >\r\n              <span style={{ color: \"black\" }}>Add New Deck</span>\r\n              <button\r\n                style={{\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                  padding: \"12px\",\r\n                  height: \"1rem\",\r\n                  borderRadius: \"5px\",\r\n                  backgroundColor: \"black\",\r\n                  color: \"white\",\r\n                }}\r\n                onClick={handleCloseModal}\r\n              >\r\n                X\r\n              </button>\r\n            </div>\r\n            <div\r\n              style={{\r\n                marginTop: \"2rem\",\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n              }}\r\n            >\r\n<div\r\n          className=\"imageContainer\"\r\n        \r\n        >\r\n          {/* {val.map((image) => (\r\n        <img key={image.id}\r\n        src={image}\r\n        alt={`Im`}\r\n        // className=\"deck-image\"\r\n        style={{ width: '90%', height: '120px', borderRadius: \"15px\"}}\r\n        />\r\n      ))} */}\r\n      \r\n          {/* <Link to=\"/presentation\" onClick={handleClick}>\r\n            <img\r\n              src= \"https://source.unsplash.com/user/c_v_r/1900x800\" \r\n              // src= {../../assets/img/about-us.jpg}\r\n              alt=\"Deck Presentation 01\"\r\n              style={{\r\n                width: \"100% \", // Adjust the width of the image as needed\r\n                height: \"100px\", // Adjust the height of the image as needed\r\n                borderRadius: \"5px\", // Adjust the border radius as needed\r\n              }}\r\n            />\r\n          </Link> */}\r\n          {/* <h6 style={{ color: \"gray\" }}>Deck Presentation 01</h6> */}\r\n        </div>\r\n\r\n    <Dropzone\r\n      getUploadParams={getUploadParams}\r\n      onChangeStatus={handleChangeStatus}\r\n      onSubmit={handleSubmit}\r\n     accept=\"application/pdf, application/vnd.ms-powerpoint, application/vnd.openxmlformats-officedocument.presentationml.presentation, application/vnd.google-apps.presentation\"\r\n    />\r\n</div>\r\n        \r\n\r\n            <div\r\n              style={{\r\n                marginTop: \"1rem\",\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                color: \"black\",\r\n              }}\r\n            >\r\n              or\r\n            </div>\r\n            <div\r\n              style={{\r\n                marginTop: \"1rem\",\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                color: \"black\",\r\n              }}\r\n            >\r\n              Import from Google Slides\r\n            </div>\r\n            <div\r\n              style={{\r\n                marginTop: \"1rem\",\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n              }}\r\n            >\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Google Slides URL\"\r\n                value={inputUrl}\r\n                onChange={(e) => setInputUrl(e.target.value)}\r\n                style={{\r\n                  border: \"1px solid #000\",\r\n                  padding: \"8px\",\r\n                  borderRadius: \"5px\",\r\n                  width: \"80%\",\r\n                }}\r\n              />\r\n            </div>\r\n            <div\r\n              style={{\r\n                marginTop: \"1rem\",\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n              }}\r\n            >\r\n              <button\r\n                onClick={() => handleFetchDoc()}\r\n                style={{\r\n                  backgroundColor: \"black\",\r\n                  color: \"white\",\r\n                  border: \"none\",\r\n                  borderRadius: \"5px\",\r\n                  padding: \"12px\",\r\n                  width: \"80%\",\r\n                }}\r\n              >\r\n                Import\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Loading Modal */}\r\n        {isLoading && (\r\n          <div\r\n            style={{\r\n              position: \"fixed\",\r\n              top: \"50%\",\r\n              left: \"50%\",\r\n              transform: \"translate(-50%, -50%)\",\r\n              backgroundColor: \"white\",\r\n              boxShadow: \"0px 0px 24px rgba(0, 0, 0, 0.2)\",\r\n              padding: \"16px\",\r\n              borderRadius: \"10px\",\r\n              width: \"520px\",\r\n              height: \"400px\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              // alignItems: \"center\",\r\n              justifyContent: \"center\",\r\n            }}\r\n          >\r\n            <h6 style={{ textAlign: \"center\", color: \"black\" }}>\r\n              Importing...\r\n            </h6>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                marginTop: \"1rem\",\r\n              }}\r\n            >\r\n              <progress\r\n                style={{\r\n                  width: \"80%\",\r\n                  height: \"45px\",\r\n                }}\r\n                max=\"100\"\r\n                value=\"60\" // Set the value dynamically based on the progress\r\n              ></progress>\r\n            </div>\r\n            <button\r\n              style={{\r\n                marginTop: \"1rem\",\r\n                border: \"1px solid #000\",\r\n                padding: \"12px\",\r\n                borderRadius: \"5px\",\r\n                backgroundColor: \"black\",\r\n                color: \"white\",\r\n                // width: \"80px\",\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n              }}\r\n              onClick={handleCloseModal}\r\n            >\r\n              Cancel\r\n            </button>\r\n          </div>\r\n        )}\r\n\r\n        {/* Imported Modal */}\r\n        {isImported && (\r\n          <div\r\n            style={{\r\n              position: \"fixed\",\r\n              top: \"50%\",\r\n              left: \"50%\",\r\n              transform: \"translate(-50%, -50%)\",\r\n              backgroundColor: \"white\",\r\n              boxShadow: \"0px 0px 24px rgba(0, 0, 0, 0.2)\",\r\n              padding: \"16px\",\r\n              borderRadius: \"10px\",\r\n              width: \"520px\",\r\n              height: \"400px\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              alignItems: \"center\",\r\n              justifyContent: \"center\",\r\n            }}\r\n          >\r\n            <h6 style={{ color: \"black\" }}>Deck Imported</h6>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"column\", // Display buttons in a column\r\n                alignItems: \"center\", // Center buttons horizontally\r\n                marginTop: \"1rem\",\r\n              }}\r\n            >\r\n              <button\r\n                style={{\r\n                  border: \"1px solid #000\",\r\n                  padding: \"12px\",\r\n                  borderRadius: \"5px\",\r\n                  backgroundColor: \"black\",\r\n                  color: \"white\",\r\n                  textAlign: \"center\",\r\n                  minWidth: \"100px\",\r\n                  marginBottom: \"1rem\", // Add margin to separate buttons\r\n                }}\r\n                onClick={() => {\r\n                  // Handle opening the deck\r\n                }}\r\n              >\r\n                Open Deck\r\n              </button>\r\n              <button\r\n                style={{\r\n                  border: \"1px solid #000\",\r\n                  padding: \"12px\",\r\n                  borderRadius: \"5px\",\r\n                  backgroundColor: \"black\",\r\n                  color: \"white\",\r\n                  textAlign: \"center\",\r\n                  minWidth: \"100px\",\r\n                }}\r\n                onClick={handleCloseModal}\r\n              >\r\n                Go Back\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n       </div>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default Drag;\r\n","export const apiUrls = {\r\n\r\n  \r\n  UPLOADFILE: \"/uploadFile\",\r\n  GETFILE:\"/getDeck\",\r\n  CONVERT:\"/converttoimage\"\r\n  \r\n};","export const defaultConfig = {\r\n    baseAPIUrl:\"http://localhost:5001\",\r\n}","// import axios from 'axios';\r\nimport axios, * as others from 'axios';\r\nimport Qs from 'qs';\r\nimport {defaultConfig} from '../config';\r\n\r\nconst serializerConfig = {\r\n    arrayFormat: 'brackets',\r\n    encode: false,\r\n};\r\n\r\n\r\nfunction callAPI(path, params, method, data = null, options = {}, headersObj = {}){\r\n    const API_ROOT = defaultConfig.baseAPIUrl;\r\n    const url = API_ROOT + path;\r\n    const headers = {\r\n        \r\n        'Content-Type': 'multipart/form-data',\r\n        Accept: 'application/json',\r\n        ...headersObj,\r\n    };\r\n\r\n    return axios({\r\n        method,\r\n        url,\r\n        params,\r\n        paramsSerializer: (paramObject) => Qs.stringify(paramObject, serializerConfig),\r\n        data,\r\n        headers,\r\n        ...options,\r\n    });\r\n}\r\n\r\n\r\n\r\nexport {callAPI};"],"names":["_ref6","_useState","useState","_useState2","_slicedToArray","isModalOpen","setIsModalOpen","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","isImported","setIsImported","_useState7","_useState8","setUploadedFile","_useState9","_useState10","setSelectedDocUrl","_useState11","_useState12","setShowDoc","_useState13","_useState14","inputUrl","setInputUrl","_useState15","_useState16","val","setVal","_useState17","_useState18","handleSubmit","useNavigate","_ref3","_asyncToGenerator","_regeneratorRuntime","mark","_callee","files","formdata","apiResponse","wrap","_context","prev","next","FormData","append","file","callAPI","apiUrls","CONVERT","sent","console","log","status","toast","success","data","message","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","error","stop","_x","apply","arguments","handleCloseModal","_fetchData","_callee4","apiResponse1","_context4","GETFILE","useEffect","fetchData","_jsx","_Fragment","children","_jsxs","className","style","display","gap","color","onClick","border","borderRadius","padding","textAlign","width","height","_defineProperty","map","image","i","src","alt","id","top","left","transform","backgroundColor","boxShadow","minHeight","onDrop","event","preventDefault","dataTransfer","length","onDragOver","e","justifyContent","alignItems","marginTop","Dropzone","getUploadParams","_ref","meta","url","onChangeStatus","_ref2","onSubmit","accept","type","placeholder","value","onChange","target","setTimeout","flexDirection","max","minWidth","marginBottom","UPLOADFILE","defaultConfig","baseAPIUrl","serializerConfig","arrayFormat","encode","path","params","method","options","headersObj","headers","_objectSpread","Accept","axios","paramsSerializer","paramObject","Qs"],"sourceRoot":""}